1.配置公钥
	ssh-keygen -t rsa -C "xxx@163.com"
2.检查是否连上：
	ssh -T git@github.com
3.设置username和emai
	 git config --global user.name "usename"
	 git config --global user.email "xxx@163.com"
4. 添加远程地址
	git remote add origin git@github.com/usename/learngit.git
	git remote add origin https://github.com/usename/learngit.git
	--如果不得行，就先执行git init下
5.上传文件到缓冲区
	git add test.txt
	如果不行，打开仓库.git下config文件，取出URL到浏览器，看是否能打开；如果不能，修改下.git下config文件的URL
6.提交到HEAD
	git commit -m "thsi is my first commit"
7. 上传到Git远程地址
	git push origin master
	如果不能上传，就先执行 git pull --rebase origin master ，更新下本地仓库，然后在push
	
8.分支：
	新建：git checkout -b newbranch
	切换：get checkout branchNae
	删除：get branch -d branchName
	提交：git push origin branchName

9.更新与合并：
	git rebase --continue
	合并分支
	git merge <branch>
	在合并改动之前，你可以使用如下命令预览差异：
	git diff <source_branch> <target_branch>
	sadfadfasdfa
	dsfadf
	sadfadfasdfaasdf

10.相对提交名：多处可用	
	HEAD： 最新提交
	HEAD~：最新提交的前一个提交；（HEAD^）
	HEAD~~：最新提交的前两个提交；
	HEAD~~~：最新提交的前三个提交；
	HEAD~n：最新提交的前n个提交；
11.比较差异：
	工作区与暂存区：git diff 
	工作区与最新提交： git diff HEAD
	暂存区与提交：git diff --cached git_help.txt
	git diff HEAD~ HEAD 
		
	
12.删除：git rm
	如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 Changes not staged for commit 的提示。
	要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作
	git rm <file>
	如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f
	git rm -f <file>
	如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 --cached 选项即可
	git rm --cached <file>
	不从工作区中删除文件：
	$ git rm --cached README 
	可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：
	git rm –r * 
	进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录。
	
13.移动或重命名：git mv
	git mv 命令用于移动或重命名一个文件、目录、软连接。
	我们先把刚移除的 README 添加回来：
	$ git add README 
	然后对其重名:
	$ git mv README  README.md
	$ ls
	README.md

14.版本回退：（*clone*）
	如果还未提交到暂存区，则直接使用 git checkout filename
	查看历史版本详细信息：git log，git reflog
	查看历史版本简要信息：git log --oneline
	版本回退：
		git reset HEAD 将最近提交的内容覆盖到暂存区（==git reset --mixed HEAD），不会影响工作区
		git reset --hard HEAD^  将最近提交的内容覆盖到暂存区和工作区
		git reset --soft HEAD^ 最新提交回滚到HEAD^对应的提交，不会影响工作区和暂存区
		回退到前3次提交之前，以此类推，回退到n次提交之前：git reset --hard HEAD~3 
		退到/进到，指定commit的哈希码（这次提交之前或之后的提交都会回滚）：git reset --hard commit_id
		
查看对象类型：git cat-file -t 哈希值
查看对象类容：git cat-file -p 哈希值
通过简短的哈希值获取整个哈希值：git rev-parse 哈希值


	
